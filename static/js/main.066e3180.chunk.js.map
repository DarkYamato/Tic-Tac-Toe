{"version":3,"sources":["components/Cell.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Cell","onClick","value","className","combo","mark","Board","useState","Array","fill","cells","setCells","isXturn","setIsXTurn","winner","setWinner","X","O","useEffect","computerStep","getWinner","status","some","x","updateCellsByComputer","computerIdxs","reduce","acc","i","concat","filter","userIdxs","computerWinIds","findIndexForCombo","userWinIds","length","bestStep","idx","newCells","slice","setTimeout","prevIsXturn","arr","availableIdxs","map","includes","flat","renderCell","handleClick","forEach","item","y","z","noWinner","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.066e3180.chunk.js","sourcesContent":["import \"./Cell.css\";\n\nexport const Cell = ({ onClick, value }) => {\n  return (\n    <div className=\"cell\" onClick={onClick}>\n      {value}\n    </div>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { Cell } from \"./Cell\";\n\nimport \"./Board.css\";\n\nconst combo = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\nconst mark = {\n  X: \"X\",\n  O: \"O\",\n};\n\nexport const Board = () => {\n  const [cells, setCells] = useState(Array(9).fill(null));\n  const [isXturn, setIsXTurn] = useState(true);\n  const [winner, setWinner] = useState(null);\n  const { X, O } = mark;\n\n  useEffect(() => {\n    if (!isXturn) {\n      computerStep();\n    }\n  }, [isXturn]);\n\n  useEffect(() => {\n    getWinner();\n  }, [cells]);\n\n  const handleClick = (i) => {\n    const newCells = cells.slice();\n\n    if (!isXturn || cells[i] || winner) {\n      return;\n    }\n\n    newCells[i] = isXturn ? X : O;\n    setCells(newCells);\n    setIsXTurn((prevIsXturn) => !prevIsXturn);\n  };\n\n  const computerStep = () => {\n    const firstStep = !cells.some((x) => x === O);\n\n    if (firstStep) {\n      if (!cells[4]) {\n        updateCellsByComputer(4);\n      } else {\n        updateCellsByComputer(0);\n      }\n    } else {\n      const computerIdxs = cells\n        .reduce((acc, x, i) => acc.concat(x === O && i), [])\n        .filter((x) => x !== false);\n      const userIdxs = cells\n        .reduce((acc, x, i) => acc.concat(x === X && i), [])\n        .filter((x) => x !== false);\n\n      const computerWinIds = findIndexForCombo(computerIdxs, 1);\n      const userWinIds = findIndexForCombo(userIdxs, 1);\n\n      if (computerWinIds.length) {\n        // Checking if we can finish the game in one move\n        updateCellsByComputer(computerWinIds[0]);\n      } else if (userWinIds.length) {\n        // Checking if we can mess up the combo for the user\n        updateCellsByComputer(userWinIds[0]);\n      } else {\n        const bestStep = findIndexForCombo(computerIdxs, 2);\n        updateCellsByComputer(bestStep[0]);\n      }\n    }\n  };\n\n  const updateCellsByComputer = (idx) => {\n    const newCells = cells.slice();\n    newCells[idx] = O;\n    setTimeout(() => {\n      setCells(newCells);\n      setIsXTurn((prevIsXturn) => !prevIsXturn);\n    }, 400);\n  };\n\n  const findIndexForCombo = (arr, length) => {\n    /**\n     * @param arr is currently selected ids\n     * @param length step for filtering array of combos\n     * @returns an array of combos remaining for a successful combination\n     */\n\n    const availableIdxs = cells\n      .reduce((acc, x, i) => acc.concat(x === null && i), [])\n      .filter((x) => x !== false);\n\n    // Remove matching elements from the array of combos, filter and flat\n    const filteredMatchCombo = combo\n      .map((x) => x.filter((x) => !arr.includes(x)))\n      .filter((x) => x.length === length)\n      .flat(2);\n\n    const indexesForSelect = filteredMatchCombo.filter((x) =>\n      availableIdxs.includes(x)\n    );\n\n    return indexesForSelect;\n  };\n\n  const handleClear = () => {\n    setCells(Array(9).fill(null));\n    setIsXTurn(true);\n    setWinner(null);\n  };\n\n  const renderCell = (i) => (\n    <Cell value={cells[i]} onClick={() => handleClick(i)} />\n  );\n\n  const getWinner = () => {\n    combo.forEach((item, i) => {\n      const [x, y, z] = combo[i];\n      if (cells[x] !== null && cells[x] === cells[y] && cells[x] === cells[z]) {\n        setWinner(cells[x]);\n      }\n      return null;\n    });\n  };\n\n  const noWinner = !winner && !cells.includes(null);\n\n  let status;\n\n  if (winner) {\n    status = `Winner is ${winner}`;\n  } else if (noWinner) {\n    status = \"No winner\";\n  } else {\n    status = isXturn ? \"Current Player: X\" : \"Current Player: O\";\n  }\n\n  return (\n    <div className=\"container\">\n      <div>\n        <div className=\"status\">{status}</div>\n        <table>\n          <tbody>\n            <tr>\n              <td>{renderCell(0)}</td>\n              <td>{renderCell(1)}</td>\n              <td>{renderCell(2)}</td>\n            </tr>\n            <tr>\n              <td>{renderCell(3)}</td>\n              <td>{renderCell(4)}</td>\n              <td>{renderCell(5)}</td>\n            </tr>\n            <tr>\n              <td>{renderCell(6)}</td>\n              <td>{renderCell(7)}</td>\n              <td>{renderCell(8)}</td>\n            </tr>\n          </tbody>\n        </table>\n        <button className=\"clear\" onClick={handleClear}>\n          clear\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { Board } from \"./components/Board\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}